// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dbtesterpb/config_client_machine.proto

package dbtesterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ConfigClientMachineInitial represents common control options on client machine.
type ConfigClientMachineInitial struct {
	PathPrefix                              string `protobuf:"bytes,1,opt,name=PathPrefix,proto3" json:"PathPrefix,omitempty" yaml:"path_prefix"`
	LogPath                                 string `protobuf:"bytes,2,opt,name=LogPath,proto3" json:"LogPath,omitempty" yaml:"log_path"`
	ClientSystemMetricsPath                 string `protobuf:"bytes,3,opt,name=ClientSystemMetricsPath,proto3" json:"ClientSystemMetricsPath,omitempty" yaml:"client_system_metrics_path"`
	ClientSystemMetricsInterpolatedPath     string `protobuf:"bytes,4,opt,name=ClientSystemMetricsInterpolatedPath,proto3" json:"ClientSystemMetricsInterpolatedPath,omitempty" yaml:"client_system_metrics_interpolated_path"`
	ClientLatencyThroughputTimeseriesPath   string `protobuf:"bytes,5,opt,name=ClientLatencyThroughputTimeseriesPath,proto3" json:"ClientLatencyThroughputTimeseriesPath,omitempty" yaml:"client_latency_throughput_timeseries_path"`
	ClientLatencyDistributionAllPath        string `protobuf:"bytes,6,opt,name=ClientLatencyDistributionAllPath,proto3" json:"ClientLatencyDistributionAllPath,omitempty" yaml:"client_latency_distribution_all_path"`
	ClientLatencyDistributionPercentilePath string `protobuf:"bytes,7,opt,name=ClientLatencyDistributionPercentilePath,proto3" json:"ClientLatencyDistributionPercentilePath,omitempty" yaml:"client_latency_distribution_percentile_path"`
	ClientLatencyDistributionSummaryPath    string `protobuf:"bytes,8,opt,name=ClientLatencyDistributionSummaryPath,proto3" json:"ClientLatencyDistributionSummaryPath,omitempty" yaml:"client_latency_distribution_summary_path"`
	ClientLatencyByKeyNumberPath            string `protobuf:"bytes,9,opt,name=ClientLatencyByKeyNumberPath,proto3" json:"ClientLatencyByKeyNumberPath,omitempty" yaml:"client_latency_by_key_number_path"`
	ServerDiskSpaceUsageSummaryPath         string `protobuf:"bytes,10,opt,name=ServerDiskSpaceUsageSummaryPath,proto3" json:"ServerDiskSpaceUsageSummaryPath,omitempty" yaml:"server_disk_space_usage_summary_path"`
	GoogleCloudProjectName                  string `protobuf:"bytes,100,opt,name=GoogleCloudProjectName,proto3" json:"GoogleCloudProjectName,omitempty" yaml:"google_cloud_project_name"`
	GoogleCloudStorageKeyPath               string `protobuf:"bytes,101,opt,name=GoogleCloudStorageKeyPath,proto3" json:"GoogleCloudStorageKeyPath,omitempty" yaml:"google_cloud_storage_key_path"`
	GoogleCloudStorageKey                   string `protobuf:"bytes,102,opt,name=GoogleCloudStorageKey,proto3" json:"GoogleCloudStorageKey,omitempty"`
	GoogleCloudStorageBucketName            string `protobuf:"bytes,103,opt,name=GoogleCloudStorageBucketName,proto3" json:"GoogleCloudStorageBucketName,omitempty" yaml:"google_cloud_storage_bucket_name"`
	GoogleCloudStorageSubDirectory          string `protobuf:"bytes,104,opt,name=GoogleCloudStorageSubDirectory,proto3" json:"GoogleCloudStorageSubDirectory,omitempty" yaml:"google_cloud_storage_sub_directory"`
}

func (m *ConfigClientMachineInitial) Reset()         { *m = ConfigClientMachineInitial{} }
func (m *ConfigClientMachineInitial) String() string { return proto.CompactTextString(m) }
func (*ConfigClientMachineInitial) ProtoMessage()    {}
func (*ConfigClientMachineInitial) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigClientMachine, []int{0}
}

// ConfigClientMachineBenchmarkOptions represents benchmark options.
type ConfigClientMachineBenchmarkOptions struct {
	Type                       string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty" yaml:"type"`
	RequestNumber              int64   `protobuf:"varint,2,opt,name=RequestNumber,proto3" json:"RequestNumber,omitempty" yaml:"request_number"`
	ConnectionNumber           int64   `protobuf:"varint,3,opt,name=ConnectionNumber,proto3" json:"ConnectionNumber,omitempty" yaml:"connection_number"`
	ClientNumber               int64   `protobuf:"varint,4,opt,name=ClientNumber,proto3" json:"ClientNumber,omitempty" yaml:"client_number"`
	ConnectionClientNumbers    []int64 `protobuf:"varint,5,rep,packed,name=ConnectionClientNumbers" json:"ConnectionClientNumbers,omitempty" yaml:"connection_client_numbers"`
	RateLimitRequestsPerSecond int64   `protobuf:"varint,6,opt,name=RateLimitRequestsPerSecond,proto3" json:"RateLimitRequestsPerSecond,omitempty" yaml:"rate_limit_requests_per_second"`
	SameKey                    bool    `protobuf:"varint,7,opt,name=SameKey,proto3" json:"SameKey,omitempty" yaml:"same_key"`
	KeySizeBytes               int64   `protobuf:"varint,8,opt,name=KeySizeBytes,proto3" json:"KeySizeBytes,omitempty" yaml:"key_size_bytes"`
	ValueSizeBytes             int64   `protobuf:"varint,9,opt,name=ValueSizeBytes,proto3" json:"ValueSizeBytes,omitempty" yaml:"value_size_bytes"`
	StaleRead                  bool    `protobuf:"varint,10,opt,name=StaleRead,proto3" json:"StaleRead,omitempty" yaml:"stale_read"`
}

func (m *ConfigClientMachineBenchmarkOptions) Reset()         { *m = ConfigClientMachineBenchmarkOptions{} }
func (m *ConfigClientMachineBenchmarkOptions) String() string { return proto.CompactTextString(m) }
func (*ConfigClientMachineBenchmarkOptions) ProtoMessage()    {}
func (*ConfigClientMachineBenchmarkOptions) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigClientMachine, []int{1}
}

// ConfigClientMachineBenchmarkSteps represents benchmark steps.
type ConfigClientMachineBenchmarkSteps struct {
	Step1StartDatabase  bool `protobuf:"varint,1,opt,name=Step1StartDatabase,proto3" json:"Step1StartDatabase,omitempty" yaml:"step1_start_database"`
	Step2StressDatabase bool `protobuf:"varint,2,opt,name=Step2StressDatabase,proto3" json:"Step2StressDatabase,omitempty" yaml:"step2_stress_database"`
	Step3StopDatabase   bool `protobuf:"varint,3,opt,name=Step3StopDatabase,proto3" json:"Step3StopDatabase,omitempty" yaml:"step3_stop_database"`
	Step4UploadLogs     bool `protobuf:"varint,4,opt,name=Step4UploadLogs,proto3" json:"Step4UploadLogs,omitempty" yaml:"step4_upload_logs"`
}

func (m *ConfigClientMachineBenchmarkSteps) Reset()         { *m = ConfigClientMachineBenchmarkSteps{} }
func (m *ConfigClientMachineBenchmarkSteps) String() string { return proto.CompactTextString(m) }
func (*ConfigClientMachineBenchmarkSteps) ProtoMessage()    {}
func (*ConfigClientMachineBenchmarkSteps) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigClientMachine, []int{2}
}

// ConfigClientMachineAgentControl represents control options on client machine.
type ConfigClientMachineAgentControl struct {
	DatabaseID                          string                               `protobuf:"bytes,1,opt,name=DatabaseID,proto3" json:"DatabaseID,omitempty" yaml:"database_id"`
	DatabaseDescription                 string                               `protobuf:"bytes,2,opt,name=DatabaseDescription,proto3" json:"DatabaseDescription,omitempty" yaml:"database_description"`
	DatabaseTag                         string                               `protobuf:"bytes,3,opt,name=DatabaseTag,proto3" json:"DatabaseTag,omitempty" yaml:"database_tag"`
	PeerIPs                             []string                             `protobuf:"bytes,4,rep,name=PeerIPs" json:"PeerIPs,omitempty" yaml:"peer_ips"`
	PeerIPsString                       string                               `protobuf:"bytes,5,opt,name=PeerIPsString,proto3" json:"PeerIPsString,omitempty" yaml:"peer_ips_string"`
	AgentPortToConnect                  int64                                `protobuf:"varint,6,opt,name=AgentPortToConnect,proto3" json:"AgentPortToConnect,omitempty" yaml:"agent_port_to_connect"`
	AgentEndpoints                      []string                             `protobuf:"bytes,7,rep,name=AgentEndpoints" json:"AgentEndpoints,omitempty" yaml:"agent_endpoints"`
	DatabasePortToConnect               int64                                `protobuf:"varint,8,opt,name=DatabasePortToConnect,proto3" json:"DatabasePortToConnect,omitempty" yaml:"database_port_to_connect"`
	DatabaseEndpoints                   []string                             `protobuf:"bytes,9,rep,name=DatabaseEndpoints" json:"DatabaseEndpoints,omitempty" yaml:"database_endpoints"`
	Flag_Etcd_Other                     *Flag_Etcd_Other                     `protobuf:"bytes,100,opt,name=flag__etcd__other,json=flagEtcdOther" json:"flag__etcd__other,omitempty" yaml:"etcd__other"`
	Flag_Etcd_Tip                       *Flag_Etcd_Tip                       `protobuf:"bytes,101,opt,name=flag__etcd__tip,json=flagEtcdTip" json:"flag__etcd__tip,omitempty" yaml:"etcd__tip"`
	Flag_Etcd_V3_2                      *Flag_Etcd_V3_2                      `protobuf:"bytes,102,opt,name=flag__etcd__v3_2,json=flagEtcdV32" json:"flag__etcd__v3_2,omitempty" yaml:"etcd__v3_2"`
	Flag_Etcd_V3_3                      *Flag_Etcd_V3_3                      `protobuf:"bytes,103,opt,name=flag__etcd__v3_3,json=flagEtcdV33" json:"flag__etcd__v3_3,omitempty" yaml:"etcd__v3_3"`
	Flag_Zookeeper_R3_5_3Beta           *Flag_Zookeeper_R3_5_3Beta           `protobuf:"bytes,200,opt,name=flag__zookeeper__r3_5_3_beta,json=flagZookeeperR353Beta" json:"flag__zookeeper__r3_5_3_beta,omitempty" yaml:"zookeeper__r3_5_3_beta"`
	Flag_Consul_V1_0_2                  *Flag_Consul_V1_0_2                  `protobuf:"bytes,300,opt,name=flag__consul__v1_0_2,json=flagConsulV102" json:"flag__consul__v1_0_2,omitempty" yaml:"consul__v1_0_2"`
	Flag_Cetcd_Beta                     *Flag_Cetcd_Beta                     `protobuf:"bytes,400,opt,name=flag__cetcd__beta,json=flagCetcdBeta" json:"flag__cetcd__beta,omitempty" yaml:"cetcd__beta"`
	Flag_Zetcd_Beta                     *Flag_Zetcd_Beta                     `protobuf:"bytes,500,opt,name=flag__zetcd__beta,json=flagZetcdBeta" json:"flag__zetcd__beta,omitempty" yaml:"zetcd__beta"`
	ConfigClientMachineBenchmarkOptions *ConfigClientMachineBenchmarkOptions `protobuf:"bytes,1000,opt,name=ConfigClientMachineBenchmarkOptions" json:"ConfigClientMachineBenchmarkOptions,omitempty" yaml:"benchmark_options"`
	ConfigClientMachineBenchmarkSteps   *ConfigClientMachineBenchmarkSteps   `protobuf:"bytes,1001,opt,name=ConfigClientMachineBenchmarkSteps" json:"ConfigClientMachineBenchmarkSteps,omitempty" yaml:"benchmark_steps"`
}

func (m *ConfigClientMachineAgentControl) Reset()         { *m = ConfigClientMachineAgentControl{} }
func (m *ConfigClientMachineAgentControl) String() string { return proto.CompactTextString(m) }
func (*ConfigClientMachineAgentControl) ProtoMessage()    {}
func (*ConfigClientMachineAgentControl) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigClientMachine, []int{3}
}

func init() {
	proto.RegisterType((*ConfigClientMachineInitial)(nil), "dbtesterpb.ConfigClientMachineInitial")
	proto.RegisterType((*ConfigClientMachineBenchmarkOptions)(nil), "dbtesterpb.ConfigClientMachineBenchmarkOptions")
	proto.RegisterType((*ConfigClientMachineBenchmarkSteps)(nil), "dbtesterpb.ConfigClientMachineBenchmarkSteps")
	proto.RegisterType((*ConfigClientMachineAgentControl)(nil), "dbtesterpb.ConfigClientMachineAgentControl")
}
func (m *ConfigClientMachineInitial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigClientMachineInitial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PathPrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.PathPrefix)))
		i += copy(dAtA[i:], m.PathPrefix)
	}
	if len(m.LogPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.LogPath)))
		i += copy(dAtA[i:], m.LogPath)
	}
	if len(m.ClientSystemMetricsPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientSystemMetricsPath)))
		i += copy(dAtA[i:], m.ClientSystemMetricsPath)
	}
	if len(m.ClientSystemMetricsInterpolatedPath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientSystemMetricsInterpolatedPath)))
		i += copy(dAtA[i:], m.ClientSystemMetricsInterpolatedPath)
	}
	if len(m.ClientLatencyThroughputTimeseriesPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientLatencyThroughputTimeseriesPath)))
		i += copy(dAtA[i:], m.ClientLatencyThroughputTimeseriesPath)
	}
	if len(m.ClientLatencyDistributionAllPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionAllPath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionAllPath)
	}
	if len(m.ClientLatencyDistributionPercentilePath) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionPercentilePath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionPercentilePath)
	}
	if len(m.ClientLatencyDistributionSummaryPath) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionSummaryPath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionSummaryPath)
	}
	if len(m.ClientLatencyByKeyNumberPath) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ClientLatencyByKeyNumberPath)))
		i += copy(dAtA[i:], m.ClientLatencyByKeyNumberPath)
	}
	if len(m.ServerDiskSpaceUsageSummaryPath) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.ServerDiskSpaceUsageSummaryPath)))
		i += copy(dAtA[i:], m.ServerDiskSpaceUsageSummaryPath)
	}
	if len(m.GoogleCloudProjectName) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.GoogleCloudProjectName)))
		i += copy(dAtA[i:], m.GoogleCloudProjectName)
	}
	if len(m.GoogleCloudStorageKeyPath) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.GoogleCloudStorageKeyPath)))
		i += copy(dAtA[i:], m.GoogleCloudStorageKeyPath)
	}
	if len(m.GoogleCloudStorageKey) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.GoogleCloudStorageKey)))
		i += copy(dAtA[i:], m.GoogleCloudStorageKey)
	}
	if len(m.GoogleCloudStorageBucketName) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.GoogleCloudStorageBucketName)))
		i += copy(dAtA[i:], m.GoogleCloudStorageBucketName)
	}
	if len(m.GoogleCloudStorageSubDirectory) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.GoogleCloudStorageSubDirectory)))
		i += copy(dAtA[i:], m.GoogleCloudStorageSubDirectory)
	}
	return i, nil
}

func (m *ConfigClientMachineBenchmarkOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigClientMachineBenchmarkOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.RequestNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.RequestNumber))
	}
	if m.ConnectionNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.ConnectionNumber))
	}
	if m.ClientNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.ClientNumber))
	}
	if len(m.ConnectionClientNumbers) > 0 {
		dAtA2 := make([]byte, len(m.ConnectionClientNumbers)*10)
		var j1 int
		for _, num1 := range m.ConnectionClientNumbers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.RateLimitRequestsPerSecond != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.RateLimitRequestsPerSecond))
	}
	if m.SameKey {
		dAtA[i] = 0x38
		i++
		if m.SameKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KeySizeBytes != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.KeySizeBytes))
	}
	if m.ValueSizeBytes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.ValueSizeBytes))
	}
	if m.StaleRead {
		dAtA[i] = 0x50
		i++
		if m.StaleRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConfigClientMachineBenchmarkSteps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigClientMachineBenchmarkSteps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Step1StartDatabase {
		dAtA[i] = 0x8
		i++
		if m.Step1StartDatabase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Step2StressDatabase {
		dAtA[i] = 0x10
		i++
		if m.Step2StressDatabase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Step3StopDatabase {
		dAtA[i] = 0x18
		i++
		if m.Step3StopDatabase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Step4UploadLogs {
		dAtA[i] = 0x20
		i++
		if m.Step4UploadLogs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConfigClientMachineAgentControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigClientMachineAgentControl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DatabaseID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.DatabaseID)))
		i += copy(dAtA[i:], m.DatabaseID)
	}
	if len(m.DatabaseDescription) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.DatabaseDescription)))
		i += copy(dAtA[i:], m.DatabaseDescription)
	}
	if len(m.DatabaseTag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.DatabaseTag)))
		i += copy(dAtA[i:], m.DatabaseTag)
	}
	if len(m.PeerIPs) > 0 {
		for _, s := range m.PeerIPs {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PeerIPsString) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(len(m.PeerIPsString)))
		i += copy(dAtA[i:], m.PeerIPsString)
	}
	if m.AgentPortToConnect != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.AgentPortToConnect))
	}
	if len(m.AgentEndpoints) > 0 {
		for _, s := range m.AgentEndpoints {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.DatabasePortToConnect != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.DatabasePortToConnect))
	}
	if len(m.DatabaseEndpoints) > 0 {
		for _, s := range m.DatabaseEndpoints {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Flag_Etcd_Other != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Etcd_Other.Size()))
		n3, err := m.Flag_Etcd_Other.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Flag_Etcd_Tip != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Etcd_Tip.Size()))
		n4, err := m.Flag_Etcd_Tip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Flag_Etcd_V3_2 != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Etcd_V3_2.Size()))
		n5, err := m.Flag_Etcd_V3_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Flag_Etcd_V3_3 != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Etcd_V3_3.Size()))
		n6, err := m.Flag_Etcd_V3_3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Flag_Zookeeper_R3_5_3Beta != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Zookeeper_R3_5_3Beta.Size()))
		n7, err := m.Flag_Zookeeper_R3_5_3Beta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Flag_Consul_V1_0_2 != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Consul_V1_0_2.Size()))
		n8, err := m.Flag_Consul_V1_0_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Flag_Cetcd_Beta != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x19
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Cetcd_Beta.Size()))
		n9, err := m.Flag_Cetcd_Beta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Flag_Zetcd_Beta != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1f
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.Flag_Zetcd_Beta.Size()))
		n10, err := m.Flag_Zetcd_Beta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ConfigClientMachineBenchmarkOptions != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.ConfigClientMachineBenchmarkOptions.Size()))
		n11, err := m.ConfigClientMachineBenchmarkOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.ConfigClientMachineBenchmarkSteps != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintConfigClientMachine(dAtA, i, uint64(m.ConfigClientMachineBenchmarkSteps.Size()))
		n12, err := m.ConfigClientMachineBenchmarkSteps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintConfigClientMachine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigClientMachineInitial) Size() (n int) {
	var l int
	_ = l
	l = len(m.PathPrefix)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.LogPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientSystemMetricsPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientSystemMetricsInterpolatedPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientLatencyThroughputTimeseriesPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionAllPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionPercentilePath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionSummaryPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ClientLatencyByKeyNumberPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.ServerDiskSpaceUsageSummaryPath)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.GoogleCloudProjectName)
	if l > 0 {
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.GoogleCloudStorageKeyPath)
	if l > 0 {
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.GoogleCloudStorageKey)
	if l > 0 {
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.GoogleCloudStorageBucketName)
	if l > 0 {
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.GoogleCloudStorageSubDirectory)
	if l > 0 {
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	return n
}

func (m *ConfigClientMachineBenchmarkOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	if m.RequestNumber != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.RequestNumber))
	}
	if m.ConnectionNumber != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.ConnectionNumber))
	}
	if m.ClientNumber != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.ClientNumber))
	}
	if len(m.ConnectionClientNumbers) > 0 {
		l = 0
		for _, e := range m.ConnectionClientNumbers {
			l += sovConfigClientMachine(uint64(e))
		}
		n += 1 + sovConfigClientMachine(uint64(l)) + l
	}
	if m.RateLimitRequestsPerSecond != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.RateLimitRequestsPerSecond))
	}
	if m.SameKey {
		n += 2
	}
	if m.KeySizeBytes != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.KeySizeBytes))
	}
	if m.ValueSizeBytes != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.ValueSizeBytes))
	}
	if m.StaleRead {
		n += 2
	}
	return n
}

func (m *ConfigClientMachineBenchmarkSteps) Size() (n int) {
	var l int
	_ = l
	if m.Step1StartDatabase {
		n += 2
	}
	if m.Step2StressDatabase {
		n += 2
	}
	if m.Step3StopDatabase {
		n += 2
	}
	if m.Step4UploadLogs {
		n += 2
	}
	return n
}

func (m *ConfigClientMachineAgentControl) Size() (n int) {
	var l int
	_ = l
	l = len(m.DatabaseID)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.DatabaseDescription)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	l = len(m.DatabaseTag)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	if len(m.PeerIPs) > 0 {
		for _, s := range m.PeerIPs {
			l = len(s)
			n += 1 + l + sovConfigClientMachine(uint64(l))
		}
	}
	l = len(m.PeerIPsString)
	if l > 0 {
		n += 1 + l + sovConfigClientMachine(uint64(l))
	}
	if m.AgentPortToConnect != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.AgentPortToConnect))
	}
	if len(m.AgentEndpoints) > 0 {
		for _, s := range m.AgentEndpoints {
			l = len(s)
			n += 1 + l + sovConfigClientMachine(uint64(l))
		}
	}
	if m.DatabasePortToConnect != 0 {
		n += 1 + sovConfigClientMachine(uint64(m.DatabasePortToConnect))
	}
	if len(m.DatabaseEndpoints) > 0 {
		for _, s := range m.DatabaseEndpoints {
			l = len(s)
			n += 1 + l + sovConfigClientMachine(uint64(l))
		}
	}
	if m.Flag_Etcd_Other != nil {
		l = m.Flag_Etcd_Other.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Etcd_Tip != nil {
		l = m.Flag_Etcd_Tip.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Etcd_V3_2 != nil {
		l = m.Flag_Etcd_V3_2.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Etcd_V3_3 != nil {
		l = m.Flag_Etcd_V3_3.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Zookeeper_R3_5_3Beta != nil {
		l = m.Flag_Zookeeper_R3_5_3Beta.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Consul_V1_0_2 != nil {
		l = m.Flag_Consul_V1_0_2.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Cetcd_Beta != nil {
		l = m.Flag_Cetcd_Beta.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.Flag_Zetcd_Beta != nil {
		l = m.Flag_Zetcd_Beta.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.ConfigClientMachineBenchmarkOptions != nil {
		l = m.ConfigClientMachineBenchmarkOptions.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	if m.ConfigClientMachineBenchmarkSteps != nil {
		l = m.ConfigClientMachineBenchmarkSteps.Size()
		n += 2 + l + sovConfigClientMachine(uint64(l))
	}
	return n
}

func sovConfigClientMachine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfigClientMachine(x uint64) (n int) {
	return sovConfigClientMachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigClientMachineInitial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigClientMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigClientMachineInitial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigClientMachineInitial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSystemMetricsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSystemMetricsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSystemMetricsInterpolatedPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSystemMetricsInterpolatedPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyThroughputTimeseriesPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyThroughputTimeseriesPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionAllPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionAllPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionPercentilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionPercentilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionSummaryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionSummaryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyByKeyNumberPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyByKeyNumberPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerDiskSpaceUsageSummaryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerDiskSpaceUsageSummaryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCloudProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudStorageKeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCloudStorageKeyPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudStorageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCloudStorageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudStorageBucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCloudStorageBucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudStorageSubDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCloudStorageSubDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigClientMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigClientMachineBenchmarkOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigClientMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigClientMachineBenchmarkOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigClientMachineBenchmarkOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNumber", wireType)
			}
			m.RequestNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionNumber", wireType)
			}
			m.ConnectionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNumber", wireType)
			}
			m.ClientNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfigClientMachine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConnectionClientNumbers = append(m.ConnectionClientNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfigClientMachine
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConfigClientMachine
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfigClientMachine
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConnectionClientNumbers = append(m.ConnectionClientNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionClientNumbers", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitRequestsPerSecond", wireType)
			}
			m.RateLimitRequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitRequestsPerSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SameKey = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySizeBytes", wireType)
			}
			m.KeySizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySizeBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSizeBytes", wireType)
			}
			m.ValueSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueSizeBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StaleRead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfigClientMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigClientMachineBenchmarkSteps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigClientMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigClientMachineBenchmarkSteps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigClientMachineBenchmarkSteps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step1StartDatabase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Step1StartDatabase = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step2StressDatabase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Step2StressDatabase = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step3StopDatabase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Step3StopDatabase = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step4UploadLogs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Step4UploadLogs = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfigClientMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigClientMachineAgentControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigClientMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigClientMachineAgentControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigClientMachineAgentControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIPs = append(m.PeerIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIPsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIPsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPortToConnect", wireType)
			}
			m.AgentPortToConnect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentPortToConnect |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentEndpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentEndpoints = append(m.AgentEndpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabasePortToConnect", wireType)
			}
			m.DatabasePortToConnect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabasePortToConnect |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseEndpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseEndpoints = append(m.DatabaseEndpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Etcd_Other", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Etcd_Other == nil {
				m.Flag_Etcd_Other = &Flag_Etcd_Other{}
			}
			if err := m.Flag_Etcd_Other.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Etcd_Tip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Etcd_Tip == nil {
				m.Flag_Etcd_Tip = &Flag_Etcd_Tip{}
			}
			if err := m.Flag_Etcd_Tip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Etcd_V3_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Etcd_V3_2 == nil {
				m.Flag_Etcd_V3_2 = &Flag_Etcd_V3_2{}
			}
			if err := m.Flag_Etcd_V3_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Etcd_V3_3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Etcd_V3_3 == nil {
				m.Flag_Etcd_V3_3 = &Flag_Etcd_V3_3{}
			}
			if err := m.Flag_Etcd_V3_3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Zookeeper_R3_5_3Beta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Zookeeper_R3_5_3Beta == nil {
				m.Flag_Zookeeper_R3_5_3Beta = &Flag_Zookeeper_R3_5_3Beta{}
			}
			if err := m.Flag_Zookeeper_R3_5_3Beta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Consul_V1_0_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Consul_V1_0_2 == nil {
				m.Flag_Consul_V1_0_2 = &Flag_Consul_V1_0_2{}
			}
			if err := m.Flag_Consul_V1_0_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 400:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Cetcd_Beta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Cetcd_Beta == nil {
				m.Flag_Cetcd_Beta = &Flag_Cetcd_Beta{}
			}
			if err := m.Flag_Cetcd_Beta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 500:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag_Zetcd_Beta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag_Zetcd_Beta == nil {
				m.Flag_Zetcd_Beta = &Flag_Zetcd_Beta{}
			}
			if err := m.Flag_Zetcd_Beta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigClientMachineBenchmarkOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigClientMachineBenchmarkOptions == nil {
				m.ConfigClientMachineBenchmarkOptions = &ConfigClientMachineBenchmarkOptions{}
			}
			if err := m.ConfigClientMachineBenchmarkOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigClientMachineBenchmarkSteps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigClientMachineBenchmarkSteps == nil {
				m.ConfigClientMachineBenchmarkSteps = &ConfigClientMachineBenchmarkSteps{}
			}
			if err := m.ConfigClientMachineBenchmarkSteps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigClientMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigClientMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigClientMachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigClientMachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigClientMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfigClientMachine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigClientMachine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigClientMachine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigClientMachine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigClientMachine   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("dbtesterpb/config_client_machine.proto", fileDescriptorConfigClientMachine)
}

var fileDescriptorConfigClientMachine = []byte{
	// 1711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xcd, 0x6e, 0xdb, 0xc8,
	0x1d, 0x5f, 0x45, 0xc9, 0xc6, 0x1e, 0xe7, 0x73, 0x12, 0x27, 0x8a, 0xe3, 0x78, 0x1c, 0x26, 0xe9,
	0x7a, 0xb1, 0x8d, 0x9d, 0x48, 0xd9, 0x05, 0x5a, 0xb4, 0x68, 0x57, 0xf6, 0xb6, 0x0d, 0xe2, 0xdd,
	0xa8, 0x94, 0x37, 0x45, 0x83, 0xa2, 0xd3, 0x11, 0x35, 0xa6, 0xb8, 0xa6, 0x38, 0x2c, 0x67, 0x18,
	0x54, 0xee, 0xad, 0x28, 0x50, 0xb4, 0xa7, 0x3d, 0xee, 0xb1, 0x0f, 0xd0, 0xe7, 0x28, 0x72, 0xec,
	0x13, 0x10, 0x6d, 0xf6, 0xd2, 0x5e, 0x89, 0x3e, 0xc0, 0x62, 0xfe, 0x24, 0xa5, 0xa1, 0x44, 0xc9,
	0xba, 0x89, 0xf3, 0xff, 0x7d, 0xcd, 0x70, 0xbe, 0x28, 0xf4, 0xbd, 0x7e, 0x4f, 0x71, 0xa9, 0x78,
	0x14, 0xf6, 0xf6, 0x1c, 0x11, 0x1c, 0x7b, 0x2e, 0x75, 0x7c, 0x8f, 0x07, 0x8a, 0x0e, 0x99, 0x33,
	0xf0, 0x02, 0xbe, 0x1b, 0x46, 0x42, 0x09, 0x8c, 0x26, 0xb8, 0x8d, 0xc7, 0xae, 0xa7, 0x06, 0x71,
	0x6f, 0xd7, 0x11, 0xc3, 0x3d, 0x57, 0xb8, 0x62, 0x0f, 0x20, 0xbd, 0xf8, 0x18, 0x9e, 0xe0, 0x01,
	0x7e, 0x65, 0xd4, 0x8d, 0x0d, 0xc3, 0xe2, 0xd8, 0x67, 0x2e, 0xe5, 0xca, 0xe9, 0xe7, 0x35, 0x32,
	0x5d, 0x3b, 0x15, 0xe2, 0x84, 0xf3, 0x90, 0x47, 0x39, 0x60, 0x73, 0x1a, 0xe0, 0x88, 0x40, 0xc6,
	0x7e, 0x5e, 0xbd, 0x3b, 0x43, 0x37, 0xb4, 0x67, 0x8a, 0xce, 0xa4, 0x68, 0x7d, 0x7b, 0x09, 0x6d,
	0xec, 0x43, 0x7f, 0xf7, 0xa1, 0xbb, 0x9f, 0x67, 0xbd, 0x7d, 0x1e, 0x78, 0xca, 0x63, 0x3e, 0xfe,
	0x04, 0xa1, 0x0e, 0x53, 0x83, 0x4e, 0xc4, 0x8f, 0xbd, 0x3f, 0x34, 0x6a, 0xdb, 0xb5, 0x9d, 0xd5,
	0xf6, 0xad, 0x34, 0x21, 0x78, 0xc4, 0x86, 0xfe, 0x0f, 0xad, 0x90, 0xa9, 0x01, 0x0d, 0xa1, 0x68,
	0xd9, 0x06, 0x12, 0x3f, 0x46, 0x17, 0x0f, 0x85, 0xab, 0x1b, 0x1a, 0xe7, 0x80, 0x74, 0x23, 0x4d,
	0xc8, 0xd5, 0x8c, 0xe4, 0x0b, 0x97, 0x6a, 0xa2, 0x65, 0x17, 0x18, 0x4c, 0xd1, 0xed, 0xcc, 0xbe,
	0x3b, 0x92, 0x8a, 0x0f, 0x3f, 0xe7, 0x2a, 0xf2, 0x1c, 0x09, 0xf4, 0x3a, 0xd0, 0x1f, 0xa5, 0x09,
	0xb9, 0x9f, 0xd1, 0xf3, 0xd7, 0x22, 0x01, 0x49, 0x87, 0x19, 0x34, 0x17, 0x9c, 0xa7, 0x82, 0xff,
	0x5c, 0x43, 0x0f, 0x2a, 0x6a, 0xcf, 0x03, 0x3d, 0x2c, 0xc2, 0x67, 0x8a, 0xf7, 0xc1, 0xed, 0x3c,
	0xb8, 0x35, 0xd3, 0x84, 0xec, 0x2e, 0x72, 0xf3, 0x0c, 0x5e, 0x6e, 0xbd, 0x8c, 0x3c, 0xfe, 0x5b,
	0x0d, 0x3d, 0xca, 0x70, 0x87, 0x4c, 0xf1, 0xc0, 0x19, 0x1d, 0x0d, 0x22, 0x11, 0xbb, 0x83, 0x30,
	0x56, 0x47, 0xde, 0x90, 0x4b, 0x1e, 0x79, 0x3c, 0xeb, 0xf6, 0x05, 0x08, 0xf2, 0x2c, 0x4d, 0xc8,
	0x93, 0x52, 0x10, 0x3f, 0xe3, 0x51, 0x35, 0x26, 0x52, 0x35, 0x66, 0xe6, 0x51, 0x96, 0xb3, 0xc0,
	0x7f, 0x44, 0xdb, 0x25, 0xe0, 0x81, 0x27, 0x55, 0xe4, 0xf5, 0x62, 0xe5, 0x89, 0xe0, 0x53, 0xdf,
	0x87, 0x18, 0xef, 0x43, 0x8c, 0xbd, 0x34, 0x21, 0x1f, 0x55, 0xc6, 0xe8, 0x1b, 0x1c, 0xca, 0x7c,
	0x3f, 0x4f, 0x70, 0xa6, 0x30, 0xfe, 0xba, 0x86, 0x3e, 0x98, 0x0b, 0xea, 0xf0, 0xc8, 0xe1, 0x81,
	0xf2, 0x7c, 0x0e, 0x21, 0x2e, 0x42, 0x88, 0x4f, 0xd2, 0x84, 0x34, 0xcf, 0x0e, 0x11, 0x8e, 0xb9,
	0x79, 0x96, 0x65, 0x6d, 0xf0, 0x5f, 0x6a, 0xe8, 0xe1, 0x5c, 0x6c, 0x37, 0x1e, 0x0e, 0x59, 0x34,
	0x82, 0x3c, 0x2b, 0x90, 0xa7, 0x95, 0x26, 0x64, 0xef, 0xec, 0x3c, 0x32, 0x23, 0xe6, 0x61, 0x96,
	0x32, 0xc0, 0x21, 0xda, 0x2c, 0xe1, 0xda, 0xa3, 0x17, 0x7c, 0xf4, 0x45, 0x3c, 0xec, 0xf1, 0x08,
	0x02, 0xac, 0x42, 0x80, 0xef, 0xa7, 0x09, 0xd9, 0xa9, 0x0c, 0xd0, 0x1b, 0xd1, 0x13, 0x3e, 0xa2,
	0x01, 0x30, 0x72, 0xe7, 0x85, 0x8a, 0x78, 0x84, 0x48, 0x97, 0x47, 0x6f, 0x78, 0x74, 0xe0, 0xc9,
	0x93, 0x6e, 0xc8, 0x1c, 0xfe, 0xa5, 0x64, 0x2e, 0x37, 0x7b, 0x8d, 0xa6, 0xa7, 0x82, 0x04, 0x82,
	0xee, 0xed, 0x09, 0x95, 0x9a, 0x42, 0x63, 0xcd, 0x99, 0xea, 0xf1, 0x59, 0xba, 0xf8, 0x37, 0xe8,
	0xd6, 0xcf, 0x85, 0x70, 0x7d, 0xbe, 0xef, 0x8b, 0xb8, 0xdf, 0x89, 0xc4, 0x57, 0xdc, 0x51, 0x5f,
	0xb0, 0x21, 0x6f, 0xf4, 0xc1, 0xf1, 0x61, 0x9a, 0x90, 0xed, 0xcc, 0xd1, 0x05, 0x1c, 0x75, 0x34,
	0x90, 0x86, 0x19, 0x92, 0x06, 0x6c, 0xc8, 0x2d, 0x7b, 0x8e, 0x06, 0x3e, 0x46, 0x77, 0x8c, 0x4a,
	0x57, 0x89, 0x88, 0xb9, 0xfc, 0x05, 0xcf, 0xba, 0xc4, 0xc1, 0x60, 0x27, 0x4d, 0xc8, 0xc3, 0x0a,
	0x03, 0x99, 0x81, 0x61, 0x28, 0xb3, 0xbe, 0xcc, 0x97, 0xc2, 0xcf, 0xd0, 0x7a, 0x65, 0xb1, 0x71,
	0xac, 0x3d, 0xec, 0xea, 0x22, 0x16, 0x68, 0x73, 0xb6, 0xd0, 0x8e, 0x9d, 0x13, 0x9e, 0x8d, 0x80,
	0x0b, 0x01, 0x3f, 0x4a, 0x13, 0xf2, 0xc1, 0x82, 0x80, 0x3d, 0x20, 0xe4, 0x03, 0xb1, 0x50, 0x10,
	0xc7, 0x68, 0x6b, 0xb6, 0xde, 0x8d, 0x7b, 0x07, 0x5e, 0xc4, 0x1d, 0x25, 0xa2, 0x51, 0x63, 0x00,
	0x96, 0x8f, 0xd3, 0x84, 0x7c, 0xb8, 0xc0, 0x52, 0xc6, 0x3d, 0xda, 0x2f, 0x38, 0x96, 0x7d, 0x86,
	0xa8, 0xf5, 0xcf, 0x0b, 0xe8, 0x41, 0xc5, 0x29, 0xd3, 0xe6, 0x81, 0x33, 0x18, 0xb2, 0xe8, 0xe4,
	0x65, 0xa8, 0x97, 0x80, 0xc4, 0x0f, 0xd0, 0xf9, 0xa3, 0x51, 0xc8, 0xf3, 0x83, 0xe6, 0x6a, 0x9a,
	0x90, 0xb5, 0x2c, 0x84, 0x1a, 0x85, 0xdc, 0xb2, 0xa1, 0x88, 0x7f, 0x82, 0x2e, 0xdb, 0xfc, 0xf7,
	0x31, 0x97, 0x2a, 0x9b, 0xc0, 0x70, 0xc2, 0xd4, 0xdb, 0x77, 0xd2, 0x84, 0xac, 0x67, 0xe8, 0x28,
	0x2b, 0xe7, 0x0b, 0xc0, 0xb2, 0xcb, 0x78, 0xfc, 0x0b, 0x74, 0x6d, 0x5f, 0x04, 0x01, 0x77, 0xb4,
	0x69, 0xae, 0x51, 0x07, 0x8d, 0xcd, 0x34, 0x21, 0x8d, 0x7c, 0x49, 0x8d, 0x11, 0x63, 0x99, 0x19,
	0x16, 0xfe, 0x11, 0xba, 0x94, 0x75, 0x28, 0x57, 0x39, 0x0f, 0x2a, 0x8d, 0x34, 0x21, 0x37, 0x4b,
	0x0b, 0xb3, 0x50, 0x28, 0xa1, 0xf1, 0x6f, 0xd1, 0xed, 0x89, 0xa2, 0x59, 0x91, 0x8d, 0x0b, 0xdb,
	0xf5, 0x9d, 0xba, 0x39, 0xf5, 0x8d, 0x38, 0x25, 0x4d, 0xa9, 0x0f, 0xbd, 0x6a, 0x11, 0xec, 0xa1,
	0x0d, 0x9b, 0x29, 0x7e, 0xe8, 0x0d, 0x3d, 0x95, 0x8f, 0x80, 0xec, 0xf0, 0xa8, 0xcb, 0x1d, 0x11,
	0xf4, 0x61, 0x6b, 0xaf, 0xb7, 0x3f, 0x4c, 0x13, 0xf2, 0x28, 0x1f, 0x35, 0xa6, 0x38, 0xf5, 0x35,
	0x98, 0xe6, 0x03, 0x28, 0xf5, 0x6e, 0x4a, 0x25, 0xe0, 0x2d, 0x7b, 0x81, 0x98, 0x3e, 0xef, 0xbb,
	0x6c, 0x08, 0x13, 0x5e, 0xef, 0xd6, 0x2b, 0xe6, 0x79, 0x2f, 0xd9, 0x10, 0x16, 0x91, 0x65, 0x17,
	0x18, 0xfc, 0x63, 0x74, 0xe9, 0x05, 0x1f, 0x75, 0xbd, 0x53, 0xde, 0x1e, 0x29, 0x2e, 0x61, 0x47,
	0x2d, 0xbd, 0x41, 0xbd, 0xe6, 0xa4, 0x77, 0xca, 0x69, 0x4f, 0xd7, 0x2d, 0xbb, 0x04, 0xc7, 0xfb,
	0xe8, 0xca, 0x2b, 0xe6, 0xc7, 0x7c, 0x22, 0xb0, 0x0a, 0x02, 0x77, 0xd3, 0x84, 0xdc, 0xce, 0x04,
	0xde, 0xe8, 0x7a, 0x49, 0x62, 0x8a, 0x82, 0x5b, 0x68, 0xb5, 0xab, 0x98, 0xcf, 0x6d, 0xce, 0xfa,
	0xb0, 0xb9, 0xad, 0xb4, 0xd7, 0xd3, 0x84, 0x5c, 0xcf, 0x43, 0xeb, 0x12, 0x8d, 0x38, 0xeb, 0x5b,
	0xf6, 0x04, 0x67, 0x25, 0xe7, 0xd0, 0xfd, 0x45, 0x13, 0xb9, 0xab, 0x78, 0x28, 0xf1, 0x4b, 0x84,
	0xf5, 0x8f, 0xa7, 0x5d, 0xc5, 0x22, 0x75, 0xc0, 0x14, 0xeb, 0x31, 0x99, 0x4d, 0xea, 0x95, 0x36,
	0x49, 0x13, 0x72, 0xb7, 0xf0, 0xe0, 0xe1, 0x53, 0x2a, 0x35, 0x88, 0xf6, 0x73, 0x94, 0x65, 0x57,
	0x50, 0xb1, 0x8d, 0x6e, 0xe8, 0xd6, 0x66, 0x57, 0x45, 0x5c, 0xca, 0xb1, 0xe2, 0x39, 0x50, 0xdc,
	0x4e, 0x13, 0xb2, 0x39, 0x51, 0x6c, 0x52, 0x09, 0x28, 0x43, 0xb2, 0x8a, 0x8c, 0x0f, 0xd1, 0x75,
	0xdd, 0xdc, 0xea, 0x2a, 0x11, 0x8e, 0x15, 0xeb, 0xa0, 0xb8, 0x95, 0x26, 0x64, 0x63, 0xa2, 0xd8,
	0xd2, 0xcb, 0x3e, 0x34, 0xf4, 0x66, 0x89, 0xf8, 0x67, 0xe8, 0xaa, 0x6e, 0x7c, 0xf6, 0x65, 0xe8,
	0x0b, 0xd6, 0x3f, 0x14, 0xae, 0x84, 0xc5, 0xb0, 0x62, 0x2e, 0x29, 0xad, 0xf5, 0x8c, 0xc6, 0x80,
	0xa0, 0xbe, 0x70, 0xa5, 0x65, 0x4f, 0x93, 0xac, 0x3f, 0x5d, 0x41, 0xa4, 0x62, 0x80, 0x3f, 0x75,
	0x79, 0xa0, 0xf6, 0x45, 0xa0, 0x22, 0x01, 0x97, 0xd2, 0xc2, 0xf7, 0xf9, 0xc1, 0xec, 0xa5, 0xb4,
	0xc8, 0x49, 0xbd, 0xbe, 0x65, 0x1b, 0x48, 0xfc, 0x4b, 0x74, 0xa3, 0x78, 0x3a, 0xe0, 0xd2, 0x89,
	0x3c, 0xd8, 0x75, 0xf2, 0x0b, 0xaa, 0xf1, 0x5e, 0xc6, 0x02, 0xfd, 0x09, 0xca, 0xb2, 0xab, 0xb8,
	0xf8, 0x07, 0x68, 0xad, 0x68, 0x3e, 0x62, 0x6e, 0x7e, 0x59, 0xbd, 0x9d, 0x26, 0xe4, 0xc6, 0x94,
	0x94, 0x62, 0xae, 0x65, 0x9b, 0x58, 0xbd, 0x64, 0x3a, 0x9c, 0x47, 0xcf, 0x3b, 0x7a, 0xa4, 0xea,
	0xe5, 0x2b, 0x72, 0xc8, 0x79, 0x44, 0xbd, 0x50, 0x5a, 0x76, 0x81, 0xc1, 0x3f, 0x45, 0x97, 0xf3,
	0x9f, 0x5d, 0x15, 0x79, 0x81, 0x9b, 0xdf, 0x10, 0x37, 0xd2, 0x84, 0xdc, 0x2a, 0x93, 0xf4, 0xfb,
	0xf7, 0x02, 0xd7, 0xb2, 0xcb, 0x04, 0xdc, 0x41, 0x18, 0x86, 0xb1, 0x23, 0x22, 0x75, 0x24, 0xf2,
	0x4d, 0x23, 0xdf, 0x06, 0x8c, 0x39, 0xc4, 0x34, 0x86, 0x86, 0x22, 0x52, 0x54, 0x09, 0x9a, 0xef,
	0x3b, 0x96, 0x5d, 0xc1, 0xc5, 0x6d, 0x74, 0x05, 0x5a, 0x3f, 0x0b, 0xfa, 0xa1, 0xf0, 0x02, 0x25,
	0x1b, 0x17, 0xa1, 0x27, 0x46, 0xa8, 0x4c, 0x8d, 0x17, 0x00, 0xcb, 0x9e, 0x62, 0xe0, 0x5f, 0xa3,
	0xf5, 0x62, 0x54, 0xca, 0xc1, 0xb2, 0x3d, 0xe1, 0x41, 0x9a, 0x10, 0x32, 0x35, 0x96, 0x33, 0xd9,
	0xaa, 0x15, 0xf0, 0x0b, 0x74, 0xbd, 0x28, 0x4c, 0x12, 0xae, 0x42, 0xc2, 0x7b, 0x69, 0x42, 0xee,
	0x4c, 0xc9, 0x1a, 0x21, 0x67, 0x79, 0x98, 0xa2, 0xeb, 0xf0, 0xf1, 0x04, 0x5f, 0x6d, 0x94, 0x0a,
	0x35, 0xe0, 0x11, 0xdc, 0x50, 0xd6, 0x9a, 0xf7, 0x76, 0x27, 0x5f, 0x58, 0xbb, 0x33, 0x20, 0x73,
	0x6a, 0x1a, 0xcd, 0x96, 0x7d, 0x59, 0x43, 0x3f, 0x53, 0x4e, 0xff, 0xa5, 0x7e, 0xc6, 0xbf, 0x42,
	0x57, 0x4d, 0xae, 0xf2, 0x42, 0xb8, 0x9f, 0xac, 0x35, 0xef, 0xce, 0x93, 0x57, 0x5e, 0xd8, 0xbe,
	0x99, 0x26, 0xe4, 0x9a, 0x29, 0xae, 0xbc, 0xd0, 0xb2, 0xd7, 0x0a, 0xe9, 0x23, 0x2f, 0xc4, 0xaf,
	0xd1, 0x35, 0x93, 0xf5, 0xa6, 0x45, 0x9b, 0x70, 0x2b, 0x59, 0x6b, 0x6e, 0xce, 0x53, 0xd6, 0x18,
	0x73, 0x37, 0x9c, 0xb4, 0x1a, 0xda, 0xaf, 0x5a, 0xcd, 0x0a, 0xed, 0x16, 0x5c, 0x5a, 0x16, 0x6b,
	0xb7, 0x2a, 0xb5, 0x5b, 0x25, 0xed, 0x16, 0xfe, 0x6b, 0x0d, 0x6d, 0x66, 0xc4, 0xf1, 0xc7, 0x30,
	0xa5, 0x51, 0x8b, 0x7e, 0x4c, 0x5b, 0xb4, 0xc7, 0x15, 0x6b, 0xbc, 0xad, 0x81, 0xd3, 0xce, 0xac,
	0x53, 0x35, 0xa1, 0x7d, 0x3f, 0x4d, 0xc8, 0xbd, 0xcc, 0xb5, 0x1a, 0x61, 0xd9, 0xeb, 0x5a, 0xe0,
	0x75, 0x51, 0xb4, 0x5b, 0x1f, 0xb7, 0xda, 0x5c, 0x31, 0xfc, 0x15, 0xba, 0x99, 0x29, 0x67, 0x9f,
	0xdd, 0x94, 0xbe, 0x79, 0x4a, 0x9f, 0xd0, 0x66, 0xe3, 0x1f, 0xe7, 0x20, 0xc2, 0xf6, 0x6c, 0x84,
	0x32, 0xd0, 0x3c, 0xdb, 0xca, 0x15, 0xcb, 0xbe, 0xa2, 0x09, 0xfb, 0xd0, 0xf8, 0xea, 0xe9, 0x93,
	0x26, 0xfe, 0x5d, 0x31, 0xd3, 0x9c, 0x6c, 0x68, 0xa0, 0xaf, 0x5f, 0xd7, 0xe7, 0x4d, 0x35, 0x03,
	0x65, 0x4e, 0x35, 0xa3, 0x39, 0x9f, 0x6a, 0xfb, 0xba, 0x05, 0x7a, 0x33, 0x76, 0x38, 0x35, 0x1c,
	0xfe, 0x3f, 0xd7, 0xe1, 0xb4, 0xda, 0xe1, 0x74, 0xc6, 0xe1, 0xf5, 0xd8, 0xe1, 0xef, 0xb5, 0xa5,
	0x2e, 0x7c, 0x8d, 0xff, 0x5e, 0x04, 0xd3, 0x3d, 0xd3, 0x74, 0x09, 0x9e, 0x79, 0xaa, 0xf4, 0x8a,
	0x1a, 0x15, 0x59, 0x51, 0x7f, 0x8b, 0x2f, 0x71, 0xd7, 0xfc, 0xa6, 0xb6, 0xc4, 0x51, 0xde, 0xf8,
	0x5f, 0x16, 0xf0, 0xf1, 0xb2, 0x01, 0x81, 0x65, 0x6e, 0x80, 0x93, 0x78, 0xfa, 0xf8, 0x93, 0x96,
	0x7d, 0xb6, 0x69, 0xfb, 0xe6, 0xdb, 0xff, 0x6c, 0xbd, 0xf7, 0xf6, 0xdd, 0x56, 0xed, 0x5f, 0xef,
	0xb6, 0x6a, 0xff, 0x7e, 0xb7, 0x55, 0xfb, 0xe6, 0xdb, 0xad, 0xf7, 0x7a, 0xef, 0xc3, 0x3f, 0x36,
	0xad, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0x25, 0x94, 0x69, 0xa1, 0xab, 0x12, 0x00, 0x00,
}
