// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dbtesterpb/config_analyze_machine.proto

/*
	Package dbtesterpb is a generated protocol buffer package.

	It is generated from these files:
		dbtesterpb/config_analyze_machine.proto
		dbtesterpb/config_client_machine.proto
		dbtesterpb/database_id.proto
		dbtesterpb/flag_cetcd.proto
		dbtesterpb/flag_consul.proto
		dbtesterpb/flag_etcd.proto
		dbtesterpb/flag_zetcd.proto
		dbtesterpb/flag_zookeeper.proto
		dbtesterpb/message.proto

	It has these top-level messages:
		ConfigAnalyzeMachineInitial
		ConfigAnalyzeMachineAllAggregatedOutput
		ConfigAnalyzeMachinePlot
		ConfigAnalyzeMachineImage
		ConfigAnalyzeMachineREADME
		ConfigClientMachineInitial
		ConfigClientMachineBenchmarkOptions
		ConfigClientMachineBenchmarkSteps
		ConfigClientMachineAgentControl
		Flag_Cetcd_Beta
		Flag_Consul_V0_8_4
		Flag_Etcd_Tip
		Flag_Etcd_V3_2
		Flag_Etcd_V3_3
		Flag_Zetcd_Beta
		Flag_Zookeeper_R3_4_9
		Flag_Zookeeper_R3_5_2Alpha
		Flag_Zookeeper_R3_5_3Beta
		Request
		Response
*/
package dbtesterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigAnalyzeMachineInitial represents common control options and test data information for analyzer machine.
type ConfigAnalyzeMachineInitial struct {
	DatabaseID                              string   `protobuf:"bytes,1,opt,name=DatabaseID,proto3" json:"DatabaseID,omitempty"`
	DatabaseTag                             string   `protobuf:"bytes,2,opt,name=DatabaseTag,proto3" json:"DatabaseTag,omitempty"`
	DatabaseDescription                     string   `protobuf:"bytes,3,opt,name=DatabaseDescription,proto3" json:"DatabaseDescription,omitempty"`
	PathPrefix                              string   `protobuf:"bytes,4,opt,name=PathPrefix,proto3" json:"PathPrefix,omitempty" yaml:"path_prefix"`
	ClientSystemMetricsInterpolatedPath     string   `protobuf:"bytes,5,opt,name=ClientSystemMetricsInterpolatedPath,proto3" json:"ClientSystemMetricsInterpolatedPath,omitempty" yaml:"client_system_metrics_interpolated_path"`
	ClientLatencyThroughputTimeseriesPath   string   `protobuf:"bytes,6,opt,name=ClientLatencyThroughputTimeseriesPath,proto3" json:"ClientLatencyThroughputTimeseriesPath,omitempty" yaml:"client_latency_throughput_timeseries_path"`
	ClientLatencyDistributionAllPath        string   `protobuf:"bytes,7,opt,name=ClientLatencyDistributionAllPath,proto3" json:"ClientLatencyDistributionAllPath,omitempty" yaml:"client_latency_distribution_all_path"`
	ClientLatencyDistributionPercentilePath string   `protobuf:"bytes,8,opt,name=ClientLatencyDistributionPercentilePath,proto3" json:"ClientLatencyDistributionPercentilePath,omitempty" yaml:"client_latency_distribution_percentile_path"`
	ClientLatencyDistributionSummaryPath    string   `protobuf:"bytes,9,opt,name=ClientLatencyDistributionSummaryPath,proto3" json:"ClientLatencyDistributionSummaryPath,omitempty" yaml:"client_latency_distribution_summary_path"`
	ClientLatencyByKeyNumberPath            string   `protobuf:"bytes,10,opt,name=ClientLatencyByKeyNumberPath,proto3" json:"ClientLatencyByKeyNumberPath,omitempty" yaml:"client_latency_by_key_number_path"`
	ServerDiskSpaceUsageSummaryPath         string   `protobuf:"bytes,11,opt,name=ServerDiskSpaceUsageSummaryPath,proto3" json:"ServerDiskSpaceUsageSummaryPath,omitempty" yaml:"server_disk_space_usage_summary_path"`
	ServerMemoryByKeyNumberPath             string   `protobuf:"bytes,12,opt,name=ServerMemoryByKeyNumberPath,proto3" json:"ServerMemoryByKeyNumberPath,omitempty" yaml:"server_memory_by_key_number_path"`
	ServerReadBytesDeltaByKeyNumberPath     string   `protobuf:"bytes,13,opt,name=ServerReadBytesDeltaByKeyNumberPath,proto3" json:"ServerReadBytesDeltaByKeyNumberPath,omitempty" yaml:"server_read_bytes_delta_by_key_number_path"`
	ServerWriteBytesDeltaByKeyNumberPath    string   `protobuf:"bytes,14,opt,name=ServerWriteBytesDeltaByKeyNumberPath,proto3" json:"ServerWriteBytesDeltaByKeyNumberPath,omitempty" yaml:"server_write_bytes_delta_by_key_number_path"`
	ServerSystemMetricsInterpolatedPathList []string `protobuf:"bytes,15,rep,name=ServerSystemMetricsInterpolatedPathList" json:"ServerSystemMetricsInterpolatedPathList,omitempty" yaml:"server_system_metrics_interpolated_path_list"`
	AllAggregatedOutputPath                 string   `protobuf:"bytes,16,opt,name=AllAggregatedOutputPath,proto3" json:"AllAggregatedOutputPath,omitempty" yaml:"all_aggregated_output_path"`
}

func (m *ConfigAnalyzeMachineInitial) Reset()         { *m = ConfigAnalyzeMachineInitial{} }
func (m *ConfigAnalyzeMachineInitial) String() string { return proto.CompactTextString(m) }
func (*ConfigAnalyzeMachineInitial) ProtoMessage()    {}
func (*ConfigAnalyzeMachineInitial) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigAnalyzeMachine, []int{0}
}

type ConfigAnalyzeMachineAllAggregatedOutput struct {
	AllAggregatedOutputPathCSV string `protobuf:"bytes,1,opt,name=AllAggregatedOutputPathCSV,proto3" json:"AllAggregatedOutputPathCSV,omitempty" yaml:"all_aggregated_output_path_csv"`
	AllAggregatedOutputPathTXT string `protobuf:"bytes,2,opt,name=AllAggregatedOutputPathTXT,proto3" json:"AllAggregatedOutputPathTXT,omitempty" yaml:"all_aggregated_output_path_txt"`
}

func (m *ConfigAnalyzeMachineAllAggregatedOutput) Reset() {
	*m = ConfigAnalyzeMachineAllAggregatedOutput{}
}
func (m *ConfigAnalyzeMachineAllAggregatedOutput) String() string { return proto.CompactTextString(m) }
func (*ConfigAnalyzeMachineAllAggregatedOutput) ProtoMessage()    {}
func (*ConfigAnalyzeMachineAllAggregatedOutput) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigAnalyzeMachine, []int{1}
}

// ConfigAnalyzeMachinePlot defines plot configuration.
type ConfigAnalyzeMachinePlot struct {
	Column         string   `protobuf:"bytes,1,opt,name=Column,proto3" json:"Column,omitempty" yaml:"column"`
	XAxis          string   `protobuf:"bytes,2,opt,name=XAxis,proto3" json:"XAxis,omitempty" yaml:"x_axis"`
	YAxis          string   `protobuf:"bytes,3,opt,name=YAxis,proto3" json:"YAxis,omitempty" yaml:"y_axis"`
	OutputPathCSV  string   `protobuf:"bytes,4,opt,name=OutputPathCSV,proto3" json:"OutputPathCSV,omitempty" yaml:"output_path_csv"`
	OutputPathList []string `protobuf:"bytes,5,rep,name=OutputPathList" json:"OutputPathList,omitempty" yaml:"output_path_list"`
}

func (m *ConfigAnalyzeMachinePlot) Reset()         { *m = ConfigAnalyzeMachinePlot{} }
func (m *ConfigAnalyzeMachinePlot) String() string { return proto.CompactTextString(m) }
func (*ConfigAnalyzeMachinePlot) ProtoMessage()    {}
func (*ConfigAnalyzeMachinePlot) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigAnalyzeMachine, []int{2}
}

// ConfigAnalyzeMachineImage defines image configuration.
type ConfigAnalyzeMachineImage struct {
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty" yaml:"title"`
	Path  string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty" yaml:"path"`
	Type  string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty" yaml:"type"`
}

func (m *ConfigAnalyzeMachineImage) Reset()         { *m = ConfigAnalyzeMachineImage{} }
func (m *ConfigAnalyzeMachineImage) String() string { return proto.CompactTextString(m) }
func (*ConfigAnalyzeMachineImage) ProtoMessage()    {}
func (*ConfigAnalyzeMachineImage) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigAnalyzeMachine, []int{3}
}

// ConfigAnalyzeMachineREADME defines read configuration.
type ConfigAnalyzeMachineREADME struct {
	OutputPath string                       `protobuf:"bytes,1,opt,name=OutputPath,proto3" json:"OutputPath,omitempty" yaml:"output_path"`
	Images     []*ConfigAnalyzeMachineImage `protobuf:"bytes,2,rep,name=Images" json:"Images,omitempty" yaml:"images"`
}

func (m *ConfigAnalyzeMachineREADME) Reset()         { *m = ConfigAnalyzeMachineREADME{} }
func (m *ConfigAnalyzeMachineREADME) String() string { return proto.CompactTextString(m) }
func (*ConfigAnalyzeMachineREADME) ProtoMessage()    {}
func (*ConfigAnalyzeMachineREADME) Descriptor() ([]byte, []int) {
	return fileDescriptorConfigAnalyzeMachine, []int{4}
}

func init() {
	proto.RegisterType((*ConfigAnalyzeMachineInitial)(nil), "dbtesterpb.ConfigAnalyzeMachineInitial")
	proto.RegisterType((*ConfigAnalyzeMachineAllAggregatedOutput)(nil), "dbtesterpb.ConfigAnalyzeMachineAllAggregatedOutput")
	proto.RegisterType((*ConfigAnalyzeMachinePlot)(nil), "dbtesterpb.ConfigAnalyzeMachinePlot")
	proto.RegisterType((*ConfigAnalyzeMachineImage)(nil), "dbtesterpb.ConfigAnalyzeMachineImage")
	proto.RegisterType((*ConfigAnalyzeMachineREADME)(nil), "dbtesterpb.ConfigAnalyzeMachineREADME")
}
func (m *ConfigAnalyzeMachineInitial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigAnalyzeMachineInitial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DatabaseID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.DatabaseID)))
		i += copy(dAtA[i:], m.DatabaseID)
	}
	if len(m.DatabaseTag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.DatabaseTag)))
		i += copy(dAtA[i:], m.DatabaseTag)
	}
	if len(m.DatabaseDescription) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.DatabaseDescription)))
		i += copy(dAtA[i:], m.DatabaseDescription)
	}
	if len(m.PathPrefix) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.PathPrefix)))
		i += copy(dAtA[i:], m.PathPrefix)
	}
	if len(m.ClientSystemMetricsInterpolatedPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientSystemMetricsInterpolatedPath)))
		i += copy(dAtA[i:], m.ClientSystemMetricsInterpolatedPath)
	}
	if len(m.ClientLatencyThroughputTimeseriesPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientLatencyThroughputTimeseriesPath)))
		i += copy(dAtA[i:], m.ClientLatencyThroughputTimeseriesPath)
	}
	if len(m.ClientLatencyDistributionAllPath) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionAllPath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionAllPath)
	}
	if len(m.ClientLatencyDistributionPercentilePath) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionPercentilePath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionPercentilePath)
	}
	if len(m.ClientLatencyDistributionSummaryPath) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientLatencyDistributionSummaryPath)))
		i += copy(dAtA[i:], m.ClientLatencyDistributionSummaryPath)
	}
	if len(m.ClientLatencyByKeyNumberPath) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ClientLatencyByKeyNumberPath)))
		i += copy(dAtA[i:], m.ClientLatencyByKeyNumberPath)
	}
	if len(m.ServerDiskSpaceUsageSummaryPath) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ServerDiskSpaceUsageSummaryPath)))
		i += copy(dAtA[i:], m.ServerDiskSpaceUsageSummaryPath)
	}
	if len(m.ServerMemoryByKeyNumberPath) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ServerMemoryByKeyNumberPath)))
		i += copy(dAtA[i:], m.ServerMemoryByKeyNumberPath)
	}
	if len(m.ServerReadBytesDeltaByKeyNumberPath) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ServerReadBytesDeltaByKeyNumberPath)))
		i += copy(dAtA[i:], m.ServerReadBytesDeltaByKeyNumberPath)
	}
	if len(m.ServerWriteBytesDeltaByKeyNumberPath) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.ServerWriteBytesDeltaByKeyNumberPath)))
		i += copy(dAtA[i:], m.ServerWriteBytesDeltaByKeyNumberPath)
	}
	if len(m.ServerSystemMetricsInterpolatedPathList) > 0 {
		for _, s := range m.ServerSystemMetricsInterpolatedPathList {
			dAtA[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllAggregatedOutputPath) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.AllAggregatedOutputPath)))
		i += copy(dAtA[i:], m.AllAggregatedOutputPath)
	}
	return i, nil
}

func (m *ConfigAnalyzeMachineAllAggregatedOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigAnalyzeMachineAllAggregatedOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllAggregatedOutputPathCSV) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.AllAggregatedOutputPathCSV)))
		i += copy(dAtA[i:], m.AllAggregatedOutputPathCSV)
	}
	if len(m.AllAggregatedOutputPathTXT) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.AllAggregatedOutputPathTXT)))
		i += copy(dAtA[i:], m.AllAggregatedOutputPathTXT)
	}
	return i, nil
}

func (m *ConfigAnalyzeMachinePlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigAnalyzeMachinePlot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Column) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.Column)))
		i += copy(dAtA[i:], m.Column)
	}
	if len(m.XAxis) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.XAxis)))
		i += copy(dAtA[i:], m.XAxis)
	}
	if len(m.YAxis) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.YAxis)))
		i += copy(dAtA[i:], m.YAxis)
	}
	if len(m.OutputPathCSV) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.OutputPathCSV)))
		i += copy(dAtA[i:], m.OutputPathCSV)
	}
	if len(m.OutputPathList) > 0 {
		for _, s := range m.OutputPathList {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ConfigAnalyzeMachineImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigAnalyzeMachineImage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *ConfigAnalyzeMachineREADME) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigAnalyzeMachineREADME) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OutputPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(len(m.OutputPath)))
		i += copy(dAtA[i:], m.OutputPath)
	}
	if len(m.Images) > 0 {
		for _, msg := range m.Images {
			dAtA[i] = 0x12
			i++
			i = encodeVarintConfigAnalyzeMachine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintConfigAnalyzeMachine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigAnalyzeMachineInitial) Size() (n int) {
	var l int
	_ = l
	l = len(m.DatabaseID)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.DatabaseTag)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.DatabaseDescription)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.PathPrefix)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientSystemMetricsInterpolatedPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientLatencyThroughputTimeseriesPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionAllPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionPercentilePath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientLatencyDistributionSummaryPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ClientLatencyByKeyNumberPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ServerDiskSpaceUsageSummaryPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ServerMemoryByKeyNumberPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ServerReadBytesDeltaByKeyNumberPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.ServerWriteBytesDeltaByKeyNumberPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	if len(m.ServerSystemMetricsInterpolatedPathList) > 0 {
		for _, s := range m.ServerSystemMetricsInterpolatedPathList {
			l = len(s)
			n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
		}
	}
	l = len(m.AllAggregatedOutputPath)
	if l > 0 {
		n += 2 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	return n
}

func (m *ConfigAnalyzeMachineAllAggregatedOutput) Size() (n int) {
	var l int
	_ = l
	l = len(m.AllAggregatedOutputPathCSV)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.AllAggregatedOutputPathTXT)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	return n
}

func (m *ConfigAnalyzeMachinePlot) Size() (n int) {
	var l int
	_ = l
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.XAxis)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.YAxis)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.OutputPathCSV)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	if len(m.OutputPathList) > 0 {
		for _, s := range m.OutputPathList {
			l = len(s)
			n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
		}
	}
	return n
}

func (m *ConfigAnalyzeMachineImage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	return n
}

func (m *ConfigAnalyzeMachineREADME) Size() (n int) {
	var l int
	_ = l
	l = len(m.OutputPath)
	if l > 0 {
		n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovConfigAnalyzeMachine(uint64(l))
		}
	}
	return n
}

func sovConfigAnalyzeMachine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfigAnalyzeMachine(x uint64) (n int) {
	return sovConfigAnalyzeMachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigAnalyzeMachineInitial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineInitial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineInitial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSystemMetricsInterpolatedPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSystemMetricsInterpolatedPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyThroughputTimeseriesPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyThroughputTimeseriesPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionAllPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionAllPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionPercentilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionPercentilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyDistributionSummaryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyDistributionSummaryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLatencyByKeyNumberPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLatencyByKeyNumberPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerDiskSpaceUsageSummaryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerDiskSpaceUsageSummaryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMemoryByKeyNumberPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerMemoryByKeyNumberPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerReadBytesDeltaByKeyNumberPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerReadBytesDeltaByKeyNumberPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerWriteBytesDeltaByKeyNumberPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerWriteBytesDeltaByKeyNumberPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSystemMetricsInterpolatedPathList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerSystemMetricsInterpolatedPathList = append(m.ServerSystemMetricsInterpolatedPathList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAggregatedOutputPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllAggregatedOutputPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigAnalyzeMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigAnalyzeMachineAllAggregatedOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineAllAggregatedOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineAllAggregatedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAggregatedOutputPathCSV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllAggregatedOutputPathCSV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAggregatedOutputPathTXT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllAggregatedOutputPathTXT = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigAnalyzeMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigAnalyzeMachinePlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigAnalyzeMachinePlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigAnalyzeMachinePlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAxis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAxis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YAxis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YAxis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPathCSV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputPathCSV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPathList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputPathList = append(m.OutputPathList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigAnalyzeMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigAnalyzeMachineImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigAnalyzeMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigAnalyzeMachineREADME) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineREADME: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigAnalyzeMachineREADME: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &ConfigAnalyzeMachineImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigAnalyzeMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigAnalyzeMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigAnalyzeMachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigAnalyzeMachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigAnalyzeMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfigAnalyzeMachine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigAnalyzeMachine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigAnalyzeMachine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigAnalyzeMachine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigAnalyzeMachine   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("dbtesterpb/config_analyze_machine.proto", fileDescriptorConfigAnalyzeMachine)
}

var fileDescriptorConfigAnalyzeMachine = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x6e, 0xdc, 0x44,
	0x18, 0xaf, 0x9b, 0x26, 0x90, 0x49, 0xd3, 0x96, 0x01, 0xb5, 0x4b, 0x82, 0xd6, 0xc1, 0x69, 0x48,
	0xaa, 0x42, 0x52, 0x12, 0x28, 0x12, 0x27, 0x76, 0xb3, 0x3d, 0x44, 0x34, 0x10, 0x39, 0x0b, 0x84,
	0xd3, 0x68, 0xec, 0x9d, 0x78, 0x47, 0xf1, 0x3f, 0x79, 0xc6, 0x65, 0x0d, 0x57, 0x24, 0x24, 0x24,
	0x24, 0xb8, 0x71, 0xe2, 0xc8, 0xb3, 0xf4, 0xc8, 0x13, 0x18, 0x08, 0x6f, 0xe0, 0x17, 0xa0, 0x9a,
	0x6f, 0x9c, 0xc4, 0xbb, 0xf1, 0xfe, 0xb9, 0xad, 0xe7, 0xfb, 0xfd, 0xfb, 0x3e, 0xcf, 0x8e, 0x07,
	0x6d, 0xf6, 0x1c, 0xc9, 0x84, 0x64, 0x49, 0xec, 0xec, 0xb8, 0x51, 0x78, 0xca, 0x3d, 0x42, 0x43,
	0xea, 0x67, 0xdf, 0x33, 0x12, 0x50, 0xb7, 0xcf, 0x43, 0xb6, 0x1d, 0x27, 0x91, 0x8c, 0x30, 0xba,
	0x02, 0xae, 0x7c, 0xe0, 0x71, 0xd9, 0x4f, 0x9d, 0x6d, 0x37, 0x0a, 0x76, 0xbc, 0xc8, 0x8b, 0x76,
	0x00, 0xe2, 0xa4, 0xa7, 0xf0, 0x04, 0x0f, 0xf0, 0x4b, 0x53, 0xad, 0xbf, 0x97, 0xd1, 0xea, 0x3e,
	0x68, 0xb7, 0xb4, 0xf4, 0xa1, 0x56, 0x3e, 0x08, 0xb9, 0xe4, 0xd4, 0xc7, 0x4d, 0x84, 0x3a, 0x54,
	0x52, 0x87, 0x0a, 0x76, 0xd0, 0x69, 0x18, 0x6b, 0xc6, 0xd6, 0xa2, 0x5d, 0x59, 0xc1, 0x6b, 0x68,
	0xe9, 0xe2, 0xa9, 0x4b, 0xbd, 0xc6, 0x4d, 0x00, 0x54, 0x97, 0xf0, 0x13, 0xf4, 0xe6, 0xc5, 0x63,
	0x87, 0x09, 0x37, 0xe1, 0xb1, 0xe4, 0x51, 0xd8, 0x98, 0x03, 0x64, 0x5d, 0x09, 0x3f, 0x45, 0xe8,
	0x88, 0xca, 0xfe, 0x51, 0xc2, 0x4e, 0xf9, 0xa0, 0x71, 0x4b, 0x01, 0xdb, 0xf7, 0x8b, 0xdc, 0xc4,
	0x19, 0x0d, 0xfc, 0x4f, 0xad, 0x98, 0xca, 0x3e, 0x89, 0xa1, 0x68, 0xd9, 0x15, 0x24, 0xfe, 0xd1,
	0x40, 0xeb, 0xfb, 0x3e, 0x67, 0xa1, 0x3c, 0xce, 0x84, 0x64, 0xc1, 0x21, 0x93, 0x09, 0x77, 0xc5,
	0x41, 0xa8, 0x26, 0x13, 0xf9, 0x54, 0xb2, 0x9e, 0x42, 0x37, 0xe6, 0x41, 0x71, 0xb7, 0xc8, 0xcd,
	0x6d, 0xad, 0xe8, 0x02, 0x89, 0x08, 0x60, 0x91, 0x40, 0xd3, 0x08, 0xaf, 0xf0, 0x88, 0x32, 0xb5,
	0xec, 0x59, 0xe4, 0xf1, 0xcf, 0x06, 0xda, 0xd0, 0xb8, 0xe7, 0x54, 0xb2, 0xd0, 0xcd, 0xba, 0xfd,
	0x24, 0x4a, 0xbd, 0x7e, 0x9c, 0xca, 0x2e, 0x0f, 0x98, 0x60, 0x09, 0x67, 0x02, 0x82, 0x2c, 0x40,
	0x90, 0x8f, 0x8a, 0xdc, 0x7c, 0x32, 0x14, 0xc4, 0xd7, 0x3c, 0x22, 0x2f, 0x89, 0x44, 0x5e, 0x32,
	0xcb, 0x28, 0xb3, 0x59, 0xe0, 0x1f, 0xd0, 0xda, 0x10, 0xb0, 0xc3, 0x85, 0x4c, 0xb8, 0x93, 0xaa,
	0x41, 0xb7, 0x7c, 0x1f, 0x62, 0xbc, 0x06, 0x31, 0x76, 0x8a, 0xdc, 0x7c, 0x5c, 0x1b, 0xa3, 0x57,
	0xe1, 0x10, 0xea, 0xfb, 0x65, 0x82, 0xa9, 0xc2, 0xf8, 0x57, 0x03, 0x6d, 0x8e, 0x05, 0x1d, 0xb1,
	0xc4, 0x65, 0xa1, 0xe4, 0x3e, 0x83, 0x10, 0xaf, 0x43, 0x88, 0xa7, 0x45, 0x6e, 0xee, 0x4e, 0x0f,
	0x11, 0x5f, 0x72, 0xcb, 0x2c, 0xb3, 0xda, 0xe0, 0x9f, 0x0c, 0xf4, 0x70, 0x2c, 0xf6, 0x38, 0x0d,
	0x02, 0x9a, 0x64, 0x90, 0x67, 0x11, 0xf2, 0xec, 0x15, 0xb9, 0xb9, 0x33, 0x3d, 0x8f, 0xd0, 0xc4,
	0x32, 0xcc, 0x4c, 0x06, 0x38, 0x46, 0xef, 0x0c, 0xe1, 0xda, 0xd9, 0xe7, 0x2c, 0xfb, 0x22, 0x0d,
	0x1c, 0x96, 0x40, 0x00, 0x04, 0x01, 0xde, 0x2f, 0x72, 0x73, 0xab, 0x36, 0x80, 0x93, 0x91, 0x33,
	0x96, 0x91, 0x10, 0x18, 0xa5, 0xf3, 0x44, 0x45, 0x9c, 0x21, 0xf3, 0x98, 0x25, 0x2f, 0x58, 0xd2,
	0xe1, 0xe2, 0xec, 0x38, 0xa6, 0x2e, 0xfb, 0x4a, 0x50, 0x8f, 0x55, 0xbb, 0x5e, 0x1a, 0xdd, 0x0a,
	0x02, 0x08, 0xaa, 0xdb, 0x33, 0x22, 0x14, 0x85, 0xa4, 0x8a, 0x33, 0xd2, 0xf1, 0x34, 0x5d, 0x1c,
	0xa0, 0x55, 0x0d, 0x39, 0x64, 0x41, 0x94, 0x5c, 0xeb, 0xf5, 0x36, 0xd8, 0x3e, 0x2e, 0x72, 0x73,
	0x73, 0xc8, 0x36, 0x00, 0x74, 0x6d, 0xab, 0x93, 0xf4, 0xd4, 0x5b, 0x5e, 0xd7, 0x75, 0x9b, 0xd1,
	0x5e, 0x3b, 0x93, 0x4c, 0x74, 0x98, 0x2f, 0xe9, 0xa8, 0xef, 0x32, 0xf8, 0x7e, 0x5c, 0xe4, 0xe6,
	0x87, 0x43, 0xbe, 0x09, 0xa3, 0x3d, 0xe2, 0x28, 0x1a, 0xe9, 0x29, 0x5e, 0x6d, 0x82, 0x59, 0x1c,
	0xd4, 0x61, 0xf0, 0x50, 0xe3, 0xbe, 0x49, 0xb8, 0x64, 0xe3, 0xa3, 0xdc, 0x19, 0xdd, 0xff, 0x65,
	0x94, 0xef, 0x14, 0x6d, 0x6a, 0x96, 0x99, 0x3c, 0xf0, 0x6f, 0x06, 0xda, 0xd4, 0xc0, 0x89, 0x27,
	0xd8, 0x73, 0x2e, 0x64, 0xe3, 0xee, 0xda, 0xdc, 0xd6, 0x62, 0xfb, 0x93, 0x22, 0x37, 0xf7, 0x86,
	0xf2, 0x4c, 0x3b, 0x24, 0x89, 0xcf, 0x85, 0xb4, 0xec, 0x59, 0x7d, 0x30, 0x41, 0x0f, 0x5a, 0xbe,
	0xdf, 0xf2, 0xbc, 0x84, 0x79, 0xaa, 0xf0, 0x65, 0x2a, 0xe3, 0x54, 0xc2, 0x48, 0xee, 0xc1, 0x48,
	0x36, 0x8a, 0xdc, 0x7c, 0x57, 0x47, 0x50, 0x67, 0x0f, 0xbd, 0x44, 0x92, 0x08, 0xa0, 0xe5, 0x04,
	0xc6, 0xa9, 0x58, 0xff, 0xab, 0x43, 0xa8, 0xe6, 0x0b, 0x57, 0x83, 0xc7, 0x1c, 0xad, 0x8c, 0x91,
	0xd9, 0x3f, 0xfe, 0x5a, 0x7f, 0xfd, 0xda, 0x8f, 0x8a, 0xdc, 0xdc, 0x98, 0x96, 0x87, 0xb8, 0xe2,
	0x85, 0x65, 0x4f, 0x10, 0x9b, 0x60, 0xd5, 0x3d, 0xe9, 0xea, 0xef, 0xe8, 0x8c, 0x56, 0x72, 0x20,
	0xc7, 0x5b, 0x75, 0x4f, 0xba, 0xd6, 0x1f, 0x37, 0x51, 0xa3, 0x6e, 0x02, 0x47, 0x7e, 0x24, 0xf1,
	0x23, 0xb4, 0xb0, 0x1f, 0xf9, 0x69, 0x10, 0x96, 0xed, 0xbd, 0x51, 0xe4, 0xe6, 0x72, 0x79, 0xe0,
	0xc0, 0xba, 0x65, 0x97, 0x00, 0xbc, 0x89, 0xe6, 0x4f, 0x5a, 0x03, 0x2e, 0xca, 0x74, 0x15, 0xe4,
	0x80, 0xd0, 0x01, 0x17, 0x96, 0xad, 0xeb, 0x0a, 0xf8, 0x2d, 0x00, 0xe7, 0x46, 0x81, 0xd9, 0x05,
	0x10, 0xea, 0xf8, 0x33, 0xb4, 0x3c, 0x3c, 0x62, 0xfd, 0xb1, 0x5f, 0x29, 0x72, 0xf3, 0xbe, 0x26,
	0x5c, 0x9b, 0xe9, 0x30, 0x01, 0xef, 0xa3, 0x3b, 0x57, 0x0b, 0xb0, 0x71, 0xe7, 0x61, 0xe3, 0xae,
	0x16, 0xb9, 0xf9, 0xe0, 0xba, 0x84, 0xde, 0x9c, 0x23, 0x14, 0xeb, 0x17, 0x03, 0xbd, 0x5d, 0x7b,
	0x09, 0x0a, 0xa8, 0xc7, 0xf0, 0x7b, 0x68, 0xbe, 0xcb, 0xa5, 0xcf, 0xca, 0x01, 0xdd, 0x2b, 0x72,
	0xf3, 0xb6, 0x56, 0x96, 0x6a, 0xd9, 0xb2, 0x75, 0x19, 0xaf, 0xa3, 0x5b, 0xb0, 0x6d, 0xf5, 0x74,
	0xee, 0x16, 0xb9, 0xb9, 0x74, 0x75, 0x61, 0xb1, 0x6c, 0x28, 0x2a, 0x50, 0x37, 0x8b, 0x59, 0x39,
	0x99, 0x0a, 0x48, 0x66, 0x31, 0xb3, 0x6c, 0x28, 0x5a, 0x7f, 0x1a, 0x68, 0xa5, 0x2e, 0x8f, 0xfd,
	0xac, 0xd5, 0x39, 0x7c, 0xa6, 0xee, 0x47, 0x95, 0x7f, 0x89, 0x31, 0x7a, 0x3f, 0x1a, 0xfa, 0x5b,
	0x54, 0x90, 0xf8, 0x08, 0x2d, 0x40, 0x47, 0xea, 0x05, 0xce, 0x6d, 0x2d, 0xed, 0x6e, 0x6c, 0x5f,
	0xdd, 0x1b, 0xb7, 0xc7, 0xf6, 0x5f, 0x7d, 0x7d, 0x1c, 0xe8, 0x96, 0x5d, 0xea, 0xb4, 0xdf, 0x7a,
	0xf9, 0x6f, 0xf3, 0xc6, 0xcb, 0xf3, 0xa6, 0xf1, 0xd7, 0x79, 0xd3, 0xf8, 0xe7, 0xbc, 0x69, 0xfc,
	0xfe, 0x5f, 0xf3, 0x86, 0xb3, 0x00, 0x57, 0xcb, 0xbd, 0x57, 0x01, 0x00, 0x00, 0xff, 0xff, 0x47,
	0x8f, 0xbe, 0x24, 0xc0, 0x0a, 0x00, 0x00,
}
