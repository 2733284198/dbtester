syntax = "proto3";
package agent;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Transporter {
	rpc Transfer(Request) returns (Response) {}
}

message Request {
	enum Operation {
		Start   = 0;
		Stop    = 1;
		Restart = 2;
	}
	enum Database {
		etcd      = 0;
		ZooKeeper = 1;
	}

	Operation operation   = 1;
	Database database     = 2;
	string peerIPs        = 3;

	// EtcdServerIndex is the index in peerIPs.
	uint32 etcdServerIndex = 4;
	uint32 zookeeperMyID   = 5;

	// ZookeeperPreAllocSize avoid seeks ZooKeeper allocates space
	// in the transaction log file in blocks of PreAllocSize kilobytes.
	// Default value is 65536 * 1024.
	int64 zookeeperPreAllocSize = 6;

	// ZookeeperMaxClientCnxns limits the number of concurrent connections
	// (at the socket level) that a single client, identified by IP address.
	int64 zookeeperMaxClientCnxns = 7;

	// WorkingDirectory is the working directory of the remote machine.
	// If empty, it will use its home directory.
	string workingDirectory = 8;

	// LogPrefix prefixes all logs to be generated in agent.
	string logPrefix = 9;

	// DatabaseLogPath is the file path to store the database logs.
	string databaseLogPath = 10;

	// MonitorResultPath is the file path to store monitoring results.
	string monitorResultPath = 11;

	// GoogleCloudProjectName is the project name to use
	// to upload logs.
	string googleCloudProjectName = 12;

	// GoogleCloudStorageJSONKey is the key to be used to upload
	// data and logs to Google Cloud Storage.
	string googleCloudStorageJSONKey = 13;

	// GoogleCloudStorageBucketName is the bucket name to store all data and logs.
	string googleCloudStorageBucketName = 14;
}

message Response {
	bool success  = 1;
}
